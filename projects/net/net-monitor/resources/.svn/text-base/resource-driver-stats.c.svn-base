/*
 * resource_driver_stats.c
 *
 * Created: 2015-01-19 22:46:38
 *  Author: ioannisg
 */ 
#include "contiki-net.h"
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include "rest-engine.h"
#include "net-monitor.h"
#include "xbee/xbee-public.h"
#include "sicslowpan.h"
#include "tests/coap-test.h"

#define DEBUG 0
#if DEBUG
#include <stdio.h>
#define PRINTF(...) printf(__VA_ARGS__)
#define SPRINTLLADDR(buf, addr) sprintf(buf, "02x:02x:02x:02x:02x:02x:02x:02x", \
  addr[0], addr[1], addr[2], addr[3], addr[4], addr[5], addr[6], addr[7])
#else
#define PRINTF(...)
#define SPRINT6ADDR(buf, addr)
#endif

/*---------------------------------------------------------------------------*/
static char xbee_stats[2*REST_MAX_CHUNK_SIZE];
static uint16_t rsp_length = 0;
/*---------------------------------------------------------------------------*/
static uint16_t
sprint_other_stats(char *buffer)
{
  sprint_time(buffer, uptime_min);
  sprintf(buffer+strlen(buffer), "6LoWPAN Dropped: %u\n",
    sicslowpan_dropped_pkt_stats);
  sprintf(buffer+strlen(buffer), "CoAP valid responses: %u\n",
    coap_test_get_rsp_count());

  return strlen(buffer);
}
/*---------------------------------------------------------------------------*/
static void
sprint_stats(void)
{
  memset(xbee_stats, 0, sizeof(xbee_stats));
  sprint_time(xbee_stats, uptime_min);
  xbee_drv_get_log(xbee_stats+strlen(xbee_stats));
  rsp_length = strlen(xbee_stats);
  rsp_length =
    (rsp_length > REST_MAX_CHUNK_SIZE) ? REST_MAX_CHUNK_SIZE : rsp_length;
}
/*---------------------------------------------------------------------------*/
static void res_get_periodic_handler(void *request, void *response,
  uint8_t *buffer, uint16_t preferred_size, int32_t *offset);
static void res_periodic_handler(void);
/*---------------------------------------------------------------------------*/
PERIODIC_RESOURCE(res_driver_stats_periodic,
  "title=\"Periodic demo\";obs",
  res_get_periodic_handler,
  NULL,
  NULL,
  NULL,
  60 * CLOCK_SECOND,
  res_periodic_handler);
/*---------------------------------------------------------------------------*/
static void
res_get_periodic_handler(void *request, void *response, uint8_t *buffer,
uint16_t preferred_size, int32_t *offset)
{
  REST.set_header_content_type(response, REST.type.TEXT_PLAIN);
  REST.set_header_max_age(response, res_driver_stats_periodic.periodic->period / CLOCK_SECOND);
  
  memcpy(buffer, xbee_stats, rsp_length);
  REST.set_response_payload(response, buffer, rsp_length);
}
/*---------------------------------------------------------------------------*/
static void
res_periodic_handler(void)
{
  /* Print XBEE device error log */
  sprint_stats();
    
  /* Usually a condition is defined under with subscribers are notified,
   * e.g., large enough delta in sensor reading.
   */
  if(1) {
    /* Notify the registered observers which will trigger,
     * the res_get_handler to create the response.
     */
    REST.notify_subscribers(&res_driver_stats_periodic);
  }
}
/*---------------------------------------------------------------------------*/
static void
res_get_handler(void *request, void *response, uint8_t *buffer,
  uint16_t preferred_size, int32_t *offset)
{ 
  const char *len = NULL;
  char message[REST_MAX_CHUNK_SIZE];
  memset(message, 0, REST_MAX_CHUNK_SIZE);
  int length = sprint_other_stats(message);

  /* The query string can be retrieved by rest_get_query() or parsed for its key-value pairs. */
  if(REST.get_query_variable(request, "len", &len)) {
    length = atoi(len);
    if(length < 0) {
      length = 0;
    }
    if(length > REST_MAX_CHUNK_SIZE) {
      length = REST_MAX_CHUNK_SIZE;
    }
    memcpy(buffer, message, length);
  } else {
    length = (length > REST_MAX_CHUNK_SIZE) ? REST_MAX_CHUNK_SIZE : length;
    memcpy(buffer, message, length);
  }
  REST.set_header_content_type(response, REST.type.TEXT_PLAIN); /* text/plain is the default, hence this option could be omitted. */
  REST.set_header_etag(response, (uint8_t *)&length, 1);
  REST.set_response_payload(response, buffer, length);

}
/*---------------------------------------------------------------------------*/
RESOURCE(res_other_stats,
"title=\"Routing Table: ?len=0..\";rt=\"Text\"",
res_get_handler,
NULL,
NULL,
NULL);
/*---------------------------------------------------------------------------*/